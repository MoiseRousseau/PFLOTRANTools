#!/usr/bin/env python

###
### This file is generated automatically by SALOME v9.4.0 with dump python functionality
###

import sys
import salome

salome.salome_init()
import salome_notebook
notebook = salome_notebook.NoteBook()
sys.path.insert(0, r'/home/moise/Ecole/plugin SALOME_/Salome-PFLOTRAN-Interface/Example/experimental_fcl_for_wrp')

###
### GEOM component
###

import GEOM
from salome.geom import geomBuilder
import math
import SALOMEDS


geompy = geomBuilder.New()

O = geompy.MakeVertex(0, 0, 0)
OX = geompy.MakeVectorDXDYDZ(1, 0, 0)
OY = geompy.MakeVectorDXDYDZ(0, 1, 0)
OZ = geompy.MakeVectorDXDYDZ(0, 0, 1)
Vertex_1 = geompy.MakeVertex(0, 0, 6)
Vertex_2 = geompy.MakeVertex(60, 0, 3)
Vertex_3 = geompy.MakeVertex(60, 5, 3)
inter_sterile_cce = geompy.MakePlaneThreePnt(Vertex_1, Vertex_3, Vertex_2, 200)
inter_cce_sable = geompy.MakeTranslation(inter_sterile_cce, 0, 0, 0.7)
top = geompy.MakeTranslation(inter_cce_sable, 0, 0, 0.3)
Vertex_4 = geompy.MakeVertex(0, 10, 0)
Vertex_5 = geompy.MakeVertex(0, 5, 7)
Vertex_6 = geompy.MakeVertex(60, 5, 4)
cote = geompy.MakePlaneThreePnt(Vertex_4, Vertex_5, Vertex_6, 200)
domain = geompy.MakeBoxDXDYDZ(60, 20, 7)
Vertex_7 = geompy.MakeVertex(10, 0, 0)
Vertex_8 = geompy.MakeVertex(10, 5, 0)
l1 = geompy.MakeEdge(Vertex_7, Vertex_8)
l2 = geompy.MakeTranslation(l1, 10, 0, 0)
l3 = geompy.MakeTranslation(l2, 10, 0, 0)
l4 = geompy.MakeTranslation(l3, 10, 0, 0)
l5 = geompy.MakeTranslation(l4, 10, 0, 0)
Vertex_9 = geompy.MakeVertex(0, 5, 0)
Vertex_10 = geompy.MakeVertex(60, 5, 0)
Edge_1 = geompy.MakeEdge(Vertex_9, Vertex_10)
src = geompy.MakePartition([domain], [inter_sterile_cce, inter_cce_sable, top, cote, l1, l2, l3, l4, l5, Edge_1], [], [], geompy.ShapeType["SOLID"], 0, [], 0)
geomObj_1 = geompy.MakeExtraction(src, [102, 150, 167, 184, 201])
domain_1 = geompy.MakeExtraction(src, [102, 150, 167, 184, 201])
[sand] = geompy.SubShapes(domain_1, [102])
[flow_control_layer] = geompy.SubShapes(domain_1, [78])
[waste] = geompy.SubShapes(domain_1, [2])
[top_1] = geompy.SubShapes(domain_1, [116])
[Sub_mesh_1] = geompy.SubShapes(sand, [3])
[inter_sable_cce] = geompy.SubShapes(sand, [30])
[Sub_mesh_1_1] = geompy.SubShapes(flow_control_layer, [3])
[front] = geompy.SubShapes(waste, [3])
[inter_cce_sterile] = geompy.SubShapes(waste, [32])
y_segs = geompy.CreateGroup(domain_1, geompy.ShapeType["EDGE"])
geompy.UnionIDs(y_segs, [108, 84, 9])
y_segs_bot = geompy.CreateGroup(domain_1, geompy.ShapeType["EDGE"])
geompy.UnionIDs(y_segs_bot, [15, 13])
z_segs = geompy.CreateGroup(sand, geompy.ShapeType["EDGE"])
geompy.UnionIDs(z_segs, [10, 5])
z_segs_1 = geompy.CreateGroup(flow_control_layer, geompy.ShapeType["EDGE"])
geompy.UnionIDs(z_segs_1, [10, 5])
z_segs_2 = geompy.CreateGroup(waste, geompy.ShapeType["EDGE"])
geompy.UnionIDs(z_segs_2, [10, 5])
x_segs = geompy.CreateGroup(domain_1, geompy.ShapeType["EDGE"])
geompy.UnionIDs(x_segs, [115, 91, 32, 118, 94, 35, 40])
x_segs_l = geompy.CreateGroup(domain_1, geompy.ShapeType["EDGE"])
geompy.UnionIDs(x_segs_l, [47, 28, 49, 51, 26, 24, 57, 18, 20, 53, 55, 22])
areas = geompy.CreateGroup(domain_1, geompy.ShapeType["FACE"])
geompy.UnionIDs(areas, [73, 70, 67, 64, 61, 58])
[l1_1,l2_1,l3_1,l4_1,l5_1,l6] = geompy.ExtractShapes(areas, geompy.ShapeType["FACE"], True)
xmax = geompy.CreateGroup(domain_1, geompy.ShapeType["FACE"])
geompy.UnionIDs(xmax, [76, 100, 124])
xmin = geompy.CreateGroup(domain_1, geompy.ShapeType["FACE"])
geompy.UnionIDs(xmin, [4, 80, 104])
pente = geompy.CreateGroup(domain_1, geompy.ShapeType["FACE"])
geompy.UnionIDs(pente, [38, 97, 121])
bottom = geompy.CreateGroup(domain_1, geompy.ShapeType["FACE"])
geompy.UnionIDs(bottom, [43, 73, 70, 67, 64, 61, 58])
geompy.addToStudy( O, 'O' )
geompy.addToStudy( OX, 'OX' )
geompy.addToStudy( OY, 'OY' )
geompy.addToStudy( OZ, 'OZ' )
geompy.addToStudy( Vertex_1, 'Vertex_1' )
geompy.addToStudy( Vertex_2, 'Vertex_2' )
geompy.addToStudy( Vertex_3, 'Vertex_3' )
geompy.addToStudy( inter_sterile_cce, 'inter_sterile_cce' )
geompy.addToStudy( inter_cce_sable, 'inter_cce_sable' )
geompy.addToStudy( top, 'top' )
geompy.addToStudy( Vertex_4, 'Vertex_4' )
geompy.addToStudy( Vertex_5, 'Vertex_5' )
geompy.addToStudy( Vertex_6, 'Vertex_6' )
geompy.addToStudy( cote, 'cote' )
geompy.addToStudy( domain, 'domain' )
geompy.addToStudy( Vertex_7, 'Vertex_7' )
geompy.addToStudy( Vertex_8, 'Vertex_8' )
geompy.addToStudy( l1, 'l1' )
geompy.addToStudy( l2, 'l2' )
geompy.addToStudy( l3, 'l3' )
geompy.addToStudy( l4, 'l4' )
geompy.addToStudy( l5, 'l5' )
geompy.addToStudy( Vertex_9, 'Vertex_9' )
geompy.addToStudy( Vertex_10, 'Vertex_10' )
geompy.addToStudy( Edge_1, 'Edge_1' )
geompy.addToStudy( src, 'src' )
geompy.addToStudy( domain_1, 'domain' )
geompy.addToStudyInFather( domain_1, sand, 'sand' )
geompy.addToStudyInFather( domain_1, flow_control_layer, 'flow_control_layer' )
geompy.addToStudyInFather( domain_1, waste, 'waste' )
geompy.addToStudyInFather( domain_1, top_1, 'top' )
geompy.addToStudyInFather( domain_1, Sub_mesh_1, 'Sub-mesh_1' )
geompy.addToStudyInFather( sand, inter_sable_cce, 'inter_sable_cce' )
geompy.addToStudyInFather( domain_1, Sub_mesh_1_1, 'Sub-mesh_1' )
geompy.addToStudyInFather( waste, front, 'front' )
geompy.addToStudyInFather( waste, inter_cce_sterile, 'inter_cce_sterile' )
geompy.addToStudyInFather( domain_1, y_segs, 'y_segs' )
geompy.addToStudyInFather( domain_1, y_segs_bot, 'y_segs_bot' )
geompy.addToStudyInFather( sand, z_segs, 'z_segs' )
geompy.addToStudyInFather( flow_control_layer, z_segs_1, 'z_segs' )
geompy.addToStudyInFather( waste, z_segs_2, 'z_segs' )
geompy.addToStudyInFather( domain_1, x_segs, 'x_segs' )
geompy.addToStudyInFather( domain_1, x_segs_l, 'x_segs_l' )
geompy.addToStudyInFather( domain_1, areas, 'areas' )
geompy.addToStudyInFather( areas, l1_1, 'l1' )
geompy.addToStudyInFather( domain_1, l2_1, 'l2' )
geompy.addToStudyInFather( areas, l3_1, 'l3' )
geompy.addToStudyInFather( areas, l4_1, 'l4' )
geompy.addToStudyInFather( domain_1, l5_1, 'l5' )
geompy.addToStudyInFather( domain_1, l6, 'l6' )
geompy.addToStudyInFather( domain_1, xmax, 'xmax' )
geompy.addToStudyInFather( domain_1, xmin, 'xmin' )
geompy.addToStudyInFather( domain_1, pente, 'pente' )
geompy.addToStudyInFather( domain_1, bottom, 'bottom' )

###
### SMESH component
###

import  SMESH, SALOMEDS
from salome.smesh import smeshBuilder

smesh = smeshBuilder.New()
#smesh.SetEnablePublish( False ) # Set to False to avoid publish in study if not needed or in some particular situations:
                                 # multiples meshes built in parallel, complex and numerous mesh edition (performance)

NETGEN_2D_Parameters_1 = smesh.CreateHypothesis('NETGEN_Parameters_2D', 'NETGENEngine')
NETGEN_2D_Parameters_1.SetWorstElemMeasure( 0 )
NETGEN_1D_2D = smesh.CreateHypothesis('NETGEN_2D', 'NETGENEngine')
Number_of_Segments_sable_7 = smesh.CreateHypothesis('NumberOfSegments')
NETGEN_2D_Parameters_1.SetMinSize( 0.01 )
NETGEN_2D_Parameters_1.SetSecondOrder( 0 )
NETGEN_2D_Parameters_1.SetOptimize( 1 )
NETGEN_2D_Parameters_1.SetFineness( 4 )
NETGEN_2D_Parameters_1.SetChordalError( 0 )
NETGEN_2D_Parameters_1.SetChordalErrorEnabled( 0 )
NETGEN_2D_Parameters_1.SetUseSurfaceCurvature( 1 )
NETGEN_2D_Parameters_1.SetFuseEdges( 1 )
NETGEN_2D_Parameters_1.SetCheckChartBoundary( 0 )
Geometric_Progression_1 = smesh.CreateHypothesis('GeometricProgression')
Number_of_Segments_sable_7.SetNumberOfSegments( 10 )
NETGEN_2D_Parameters_2 = smesh.CreateHypothesis('NETGEN_Parameters_2D', 'NETGENEngine')
NETGEN_2D_Parameters_2.SetMinSize( 0.02 )
NETGEN_2D_Parameters_2.SetSecondOrder( 0 )
NETGEN_2D_Parameters_2.SetOptimize( 1 )
NETGEN_2D_Parameters_2.SetChordalErrorEnabled( 0 )
NETGEN_2D_Parameters_2.SetUseSurfaceCurvature( 1 )
NETGEN_2D_Parameters_2.SetFuseEdges( 1 )
NETGEN_2D_Parameters_2.SetWorstElemMeasure( 0 )
NETGEN_2D_Parameters_2.SetQuadAllowed( 1 )
NETGEN_2D_Parameters_2.SetCheckChartBoundary( 0 )
Hexa_3D = smesh.CreateHypothesis('Hexa_3D')
Geometric_Progression_1.SetStartLength( 0.03 )
Geometric_Progression_1.SetCommonRatio( 1.1 )
Geometric_Progression_1.SetReversedEdges( [ 16, 28, 11, 6 ] )
Geometric_Progression_1.SetObjectEntry( "smeshObj_1" )
Geometric_Progression_pente = smesh.CreateHypothesis('GeometricProgression')
Projection_1D2D = smesh.CreateHypothesis('Projection_1D2D')
Geometric_Progression_pente.SetStartLength( 0.03 )
Geometric_Progression_pente.SetCommonRatio( 1.04 )
Geometric_Progression_pente.SetReversedEdges( [ 88 ] )
Geometric_Progression_pente.SetObjectEntry( "smeshObj_1" )
NETGEN_2D_Parameters_2.SetChordalError( 0 )
NETGEN_2D_Parameters_2.SetMaxSize( 0.2 )
Import_1D2D = smesh.CreateHypothesis('Import_1D2D')
MEFISTO_2D = smesh.CreateHypothesis('MEFISTO_2D')
Length_From_Edges_1 = smesh.CreateHypothesis('LengthFromEdges')
Max_Element_Area_1 = smesh.CreateHypothesis('MaxElementArea')
Max_Element_Area_1.SetMaxElementArea( 0.001 )
NETGEN_2D_Parameters_2.SetFineness( 4 )
Mesh_1 = smesh.Mesh(domain_1)
Prism_3D = Mesh_1.Prism()
NETGEN_2D_Parameters_1.SetUseDelauney( 1 )
NETGEN_2D_Parameters_1.SetQuadAllowed( 1 )
Regular_1D = Mesh_1.Segment(geom=Sub_mesh_1)
sable_front = Regular_1D.GetSubMesh()
Quadrangle_2D = Mesh_1.Quadrangle(algo=smeshBuilder.QUADRANGLE,geom=Sub_mesh_1)
Regular_1D_1 = Mesh_1.Segment(geom=z_segs)
smeshObj_1 = Regular_1D_1.GetSubMesh()
Number_of_Segments_cce_10 = Regular_1D_1.NumberOfSegments(20)
isDone = Mesh_1.SetMeshOrder( [ [ smeshObj_1, sable_front ] ])
Local_Length_1 = smesh.CreateHypothesis('LocalLength')
Local_Length_1.SetLength( 0.25 )
Local_Length_1.SetPrecision( 1e-07 )
Quadrangle_Parameters_1 = Quadrangle_2D.QuadrangleParameters(smeshBuilder.QUAD_REDUCED,-1,[],[])
Mesh_1.GetMesh().RemoveSubMesh( smeshObj_1 )
Number_of_Segments_hori = Regular_1D.NumberOfSegments(20)
Regular_1D_2 = Mesh_1.Segment(geom=Sub_mesh_1_1)
cce_front = Regular_1D_2.GetSubMesh()
status = Mesh_1.AddHypothesis(Number_of_Segments_hori,Sub_mesh_1_1)
Quadrangle_2D_1 = Mesh_1.Quadrangle(algo=smeshBuilder.QUADRANGLE,geom=Sub_mesh_1_1)
Viscous_Layers_2D_1 = smesh.CreateHypothesis('ViscousLayers2D')
Viscous_Layers_2D_1.SetTotalThickness( 0.5 )
Viscous_Layers_2D_1.SetNumberLayers( 5 )
Viscous_Layers_2D_1.SetStretchFactor( 1 )
Viscous_Layers_2D_1.SetEdges( [ 9 ], 0 )
NETGEN_2D_Parameters_1.SetMaxSize( 0.2 )
isDone = Mesh_1.SetMeshOrder( [ [ sable_front, cce_front ] ])
Regular_1D_3 = Mesh_1.Segment(geom=front)
sterile_front = Regular_1D_3.GetSubMesh()
Number_of_Segments_sterile_30 = Regular_1D_3.NumberOfSegments(30)
Quadrangle_2D_2 = Mesh_1.Quadrangle(algo=smeshBuilder.QUADRANGLE,geom=front)
isDone = Mesh_1.SetMeshOrder( [ [ sable_front, cce_front, sterile_front ] ])
Regular_1D_4 = Mesh_1.Segment(geom=y_segs_bot)
Sub_mesh_1_2 = Regular_1D_4.GetSubMesh()
isDone = Mesh_1.SetMeshOrder( [ [ sable_front, cce_front, Sub_mesh_1_2, sterile_front ] ])
Number_of_Segments_10 = Regular_1D_4.NumberOfSegments(10)
status = Mesh_1.AddHypothesis(Quadrangle_Parameters_1,front)
Regular_1D_5 = Mesh_1.Segment(geom=x_segs)
Number_of_Segments_x = Regular_1D_5.NumberOfSegments(240)
Regular_1D_6 = Mesh_1.Segment(geom=x_segs_l)
Number_of_Segments_40 = Regular_1D_6.NumberOfSegments(40)
isDone = Mesh_1.Compute()
isDone = Mesh_1.SmoothParametricObject( Mesh_1, [], 20, 1.1, SMESH.SMESH_MeshEditor.LAPLACIAN_SMOOTH )
l1_2 = Mesh_1.GroupOnGeom(l1_1,'l1',SMESH.FACE)
l2_2 = Mesh_1.GroupOnGeom(l2_1,'l2',SMESH.FACE)
l3_2 = Mesh_1.GroupOnGeom(l3_1,'l3',SMESH.FACE)
l4_2 = Mesh_1.GroupOnGeom(l4_1,'l4',SMESH.FACE)
l5_2 = Mesh_1.GroupOnGeom(l5_1,'l5',SMESH.FACE)
l6_1 = Mesh_1.GroupOnGeom(l6,'l6',SMESH.FACE)
top_2 = Mesh_1.GroupOnGeom(top_1,'top',SMESH.FACE)
xmax_1 = Mesh_1.GroupOnGeom(xmax,'xmax',SMESH.FACE)
xmin_1 = Mesh_1.GroupOnGeom(xmin,'xmin',SMESH.FACE)
pente_1 = Mesh_1.GroupOnGeom(pente,'pente',SMESH.FACE)
sable = Mesh_1.GroupOnGeom(sand,'sable',SMESH.VOLUME)
cce = Mesh_1.GroupOnGeom(flow_control_layer,'cce',SMESH.VOLUME)
sterile = Mesh_1.GroupOnGeom(waste,'sterile',SMESH.VOLUME)
bottom_1 = Mesh_1.GroupOnGeom(bottom,'bottom',SMESH.FACE)
[ l1_2, l2_2, l3_2, l4_2, l5_2, l6_1, top_2, xmax_1, xmin_1, pente_1, sable, cce, sterile, bottom_1 ] = Mesh_1.GetGroups()
inter_sable_cce_1 = Mesh_1.GroupOnGeom(inter_sable_cce,'inter_sable_cce',SMESH.FACE)
inter_cce_sterile_1 = Mesh_1.GroupOnGeom(inter_cce_sterile,'inter_cce_sterile',SMESH.FACE)
[ l1_2, l2_2, l3_2, l4_2, l5_2, l6_1, top_2, xmax_1, xmin_1, pente_1, sable, cce, sterile, bottom_1, inter_sable_cce_1, inter_cce_sterile_1 ] = Mesh_1.GetGroups()
x = Mesh_1.GetSubMesh( x_segs, 'Sub-mesh_2' )
x_l = Mesh_1.GetSubMesh( x_segs_l, 'Sub-mesh_2' )

## some objects were removed
aStudyBuilder = salome.myStudy.NewBuilder()
SO = salome.myStudy.FindObjectIOR(salome.myStudy.ConvertObjectToIOR(smeshObj_1))
if SO: aStudyBuilder.RemoveObjectWithChildren(SO)

## Set names of Mesh objects
smesh.SetName(Prism_3D.GetAlgorithm(), 'Prism_3D')
smesh.SetName(xmax_1, 'xmax')
smesh.SetName(xmin_1, 'xmin')
smesh.SetName(NETGEN_1D_2D, 'NETGEN 1D-2D')
smesh.SetName(Regular_1D.GetAlgorithm(), 'Regular_1D')
smesh.SetName(Hexa_3D, 'Hexa_3D')
smesh.SetName(NETGEN_2D_Parameters_1, 'NETGEN 2D Parameters_1')
smesh.SetName(Number_of_Segments_hori, 'Number of Segments_hori')
smesh.SetName(Quadrangle_2D.GetAlgorithm(), 'Quadrangle_2D')
smesh.SetName(Import_1D2D, 'Import_1D2D')
smesh.SetName(Number_of_Segments_x, 'Number of Segments_x')
smesh.SetName(Projection_1D2D, 'Projection_1D2D')
smesh.SetName(Number_of_Segments_sable_7, 'Number of Segments_sable_7')
smesh.SetName(MEFISTO_2D, 'MEFISTO_2D')
smesh.SetName(Geometric_Progression_1, 'Geometric Progression_1')
smesh.SetName(l1_2, 'l1')
smesh.SetName(Number_of_Segments_sterile_30, 'Number of Segments_sterile_30')
smesh.SetName(l2_2, 'l2')
smesh.SetName(Number_of_Segments_cce_10, 'Number of Segments_cce_10')
smesh.SetName(l3_2, 'l3')
smesh.SetName(l4_2, 'l4')
smesh.SetName(l5_2, 'l5')
smesh.SetName(sable_front, 'sable_front')
smesh.SetName(NETGEN_2D_Parameters_2, 'NETGEN 2D Parameters_2')
smesh.SetName(l6_1, 'l6')
smesh.SetName(Geometric_Progression_pente, 'Geometric Progression_pente')
smesh.SetName(top_2, 'top')
smesh.SetName(sterile_front, 'sterile_front')
smesh.SetName(cce_front, 'cce_front')
smesh.SetName(Mesh_1.GetMesh(), 'Mesh_1')
smesh.SetName(x, 'x')
smesh.SetName(Sub_mesh_1_2, 'Sub-mesh_1')
smesh.SetName(x_l, 'x_l')
smesh.SetName(bottom_1, 'bottom')
smesh.SetName(pente_1, 'pente')
smesh.SetName(inter_cce_sterile_1, 'inter_cce_sterile')
smesh.SetName(Quadrangle_Parameters_1, 'Quadrangle Parameters_1')
smesh.SetName(inter_sable_cce_1, 'inter_sable_cce')
smesh.SetName(Local_Length_1, 'Local Length_1')
smesh.SetName(sterile, 'sterile')
smesh.SetName(Max_Element_Area_1, 'Max. Element Area_1')
smesh.SetName(cce, 'cce')
smesh.SetName(Length_From_Edges_1, 'Length From Edges_1')
smesh.SetName(sable, 'sable')
smesh.SetName(Number_of_Segments_40, 'Number of Segments_40')
smesh.SetName(Number_of_Segments_10, 'Number of Segments_10')
smesh.SetName(Viscous_Layers_2D_1, 'Viscous Layers 2D_1')


if salome.sg.hasDesktop():
  salome.sg.updateObjBrowser()
